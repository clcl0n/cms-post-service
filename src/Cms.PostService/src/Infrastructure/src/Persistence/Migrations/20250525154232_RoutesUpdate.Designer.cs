// <auto-generated />
using System;
using Cms.PostService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cms.PostService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PostServiceDbContext))]
    [Migration("20250525154232_RoutesUpdate")]
    partial class RoutesUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cms-post-service")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cms.PostService.Domain.Entities.BodyBlocks.BaseBodyBlock", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("PostId", "Order");

                    b.HasIndex("PostId")
                        .HasDatabaseName("IX_bb___post_id");

                    b.ToTable("body_block", "cms-post-service");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Cms.PostService.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BodyPlainText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body_plain_text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid>("ListingImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("listing_image_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid")
                        .HasColumnName("topic_id");

                    b.HasKey("Id")
                        .HasName("PK_post___id");

                    b.HasIndex("ListingImageId")
                        .HasDatabaseName("IX_post___listing_image_id");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("IX_post___topic_id");

                    b.ToTable("post", "cms-post-service");
                });

            modelBuilder.Entity("Cms.PostService.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK_topic___id");

                    b.ToTable("topic", "cms-post-service");
                });

            modelBuilder.Entity("Cms.PostService.Domain.Entities.BodyBlocks.ParagraphBodyBlock", b =>
                {
                    b.HasBaseType("Cms.PostService.Domain.Entities.BodyBlocks.BaseBodyBlock");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.ToTable("paragraph_body_block", "cms-post-service");
                });

            modelBuilder.Entity("Cms.PostService.Domain.Entities.BodyBlocks.BaseBodyBlock", b =>
                {
                    b.HasOne("Cms.PostService.Domain.Entities.Post", "Post")
                        .WithMany("BodyBlocks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_bb_post___post_id");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Cms.PostService.Domain.Entities.Post", b =>
                {
                    b.HasOne("Cms.PostService.Domain.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_topic_topic_id");

                    b.OwnsMany("Cms.PostService.Domain.Entities.Route", "Routes", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.HasKey("PostId", "__synthesizedOrdinal");

                            b1.ToTable("post", "cms-post-service");

                            b1.ToJson("routes");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_post_post_post_id");
                        });

                    b.Navigation("Routes");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Cms.PostService.Domain.Entities.BodyBlocks.ParagraphBodyBlock", b =>
                {
                    b.HasOne("Cms.PostService.Domain.Entities.BodyBlocks.BaseBodyBlock", null)
                        .WithOne()
                        .HasForeignKey("Cms.PostService.Domain.Entities.BodyBlocks.ParagraphBodyBlock", "PostId", "Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_bb_paragraph_bb___post_id_order");
                });

            modelBuilder.Entity("Cms.PostService.Domain.Entities.Post", b =>
                {
                    b.Navigation("BodyBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
